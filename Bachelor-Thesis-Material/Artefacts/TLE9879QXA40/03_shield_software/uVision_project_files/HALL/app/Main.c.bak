/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/******************************************************************************/
/** BLDC: Motor Drive with block commutation and Hall sensor                 **/
/******************************************************************************/
/** use the Poti to start/stop and speedup motor                             **/
/** Motor connection, QBL4208:                                               **/
/** Phase 1             : black                                              **/
/** Phase 2             : yellow                                             **/
/** Phase 3             : red                                                **/
/** Hall A - P0.3       : blue                                               **/
/** Hall B - P0.4       : green                                              **/
/** Hall C - P1.2       : white                                              **/
/** Hall Supply - VDDEXT: red                                                **/
/** Hall Gnd - GND      : black                                              **/
/******************************************************************************/

/*******************************************************************************
**                      Includes                                              **
*******************************************************************************/
#include "Main.h"
#include "Emo.h"
#include "globvars_HALL.h"
#include "commands.h"


/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/
#define CURRENTMODE 2

/* states for interrupt */
#define NEWCOMMAND 0
#define DATA_1_OF_1 1
#define DATA_1_OF_2 2
#define DATA_2_OF_2 3
#define MOTORSPEED 4
#define SENDDATA 5
#define RECEIVEDATA 6

/* states for communication main <--> interrupt */
#define UNINITIALIZED				0
#define READYFORSPIDATA 		1
#define NEWSPIDATATOPROCESS	2
#define PROCESSINGSPIDATA 	3

/*******************************************************************************
**                      Private Function Declarations                         **
*******************************************************************************/
static void Main_lStartMotor(void);
static void Main_lStopMotor(void);

/*******************************************************************************
**                      Globale Variable Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                      Private Variable Definitions                          **
*******************************************************************************/
static uint8 bMotorRun;

// interrupt --> main
static uint16 word1 = 0;
static uint8 word1byte1 = 0, word1byte2 = 0;
static uint16 word2 = 0, word3 = 0;
static sint16 motorspeed = 0;

// main --> interrupt
static uint8 data_prepared = 0, success = 0;
static uint8 calcCRC, recvCRC; 

// main <--> interrupt
uint8 cmdstate = UNINITIALIZED;

/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                      Global Function Definitions                           **
*******************************************************************************/
/** \brief Executes main code.
 *
 * \param None
 * \return None
 *
 */
int main(void)
{
  /*****************************************************************************
  ** initialization of the hardware modules based on the configuration done   **
  ** by using the IFXConfigWizard                                             **
  *****************************************************************************/
	uint8 boardnr = 0;
	uint8 *uint8ptr;

	/* Initialize device drivers, Note: Watchdog is already initialized in Bootloader */
	TLE_Init();
	bMotorRun = 0;
	
	// set Chip_Selected- and Chip_Deselected-interrupts according to boardnr in GPUDATA01
	boardnr = PMU->GPUDATA01.bit.DATA1;
	set_boardnr(boardnr);
	
	// HALL --> LED 0.2 on 
	PORT_ChangePin(0x0001, PORT_ACTION_CLEAR);
	PORT_ChangePin(0x0002, PORT_ACTION_SET);
	PORT_ChangePin(0x0003, PORT_ACTION_CLEAR);
	sendPosAnswer(0x0100 + CURRENTMODE);
	
	rxtxbuffer.datastruct_HALL = Emo_Hallpar_Cfg;
  	Emo_SetRefSpeed(2000);
	Emo_Init();
	
	cmdstate = READYFORSPIDATA;

	while (1)
	{
		/* Service watch-dog */
		WDT1_Service();

		/* wait for new spi data */
		if(cmdstate == NEWSPIDATATOPROCESS)
		{
			cmdstate = PROCESSINGSPIDATA;
			
			switch (word1byte1)
			{
				case MODECONTROL:
					if(word1byte2 == GETMYMODE)
						sendPosAnswer(word1 + CURRENTMODE);
					else if(CURRENTMODE != word1byte2)
						changeMode(word1byte2);
					else
						sendNegAnswer(word1);
					
					cmdstate = READYFORSPIDATA;
					break;
					
				case LOADDATASET: 
					loadDataset(word1byte2);
					sendPosAnswer(word1);
					cmdstate = READYFORSPIDATA;
					break;
						
				case SENDDATASET:
					// just prepare data here, data is sent in interrupt
					rxtxbuffer.datastruct_HALL = Emo_Hallpar_Cfg;
					uint8ptr = (uint8*)&rxtxbuffer;
					calcCRC =  CRC8(uint8ptr, NROFBYTES);
					data_prepared = 1;
					cmdstate = READYFORSPIDATA;
					break;
					
				case RECEIVEDATASET: 
					uint8ptr = (uint8*)&rxtxbuffer;
					calcCRC =  CRC8(uint8ptr, NROFBYTES);
					
					if(recvCRC == calcCRC)
					{
						if(bMotorRun == 1u)
						{
							Main_lStopMotor();
							bMotorRun = 0u;
						}
						Emo_Hallpar_Cfg = rxtxbuffer.datastruct_HALL;
						updateDatasetDependencies();
						Emo_Init();
						sendPosAnswer(word1);
					}
					else
					{
						sendNegAnswer(word1);
					}
					cmdstate = READYFORSPIDATA;
					break;
						
				case CHANGEPARAMETER:
					if(bMotorRun == 1u)
					{
						Main_lStopMotor();
						bMotorRun = 0u;
					}
					changeSingleParameter(word1byte2, word2, word3);
					sendPosAnswer(word1);
					cmdstate = READYFORSPIDATA;
					break;
						
				case SAVEDATASET: 
					success = saveCurrentDataset(word1byte2);
					// saving dataset needs more time than other commands --> SSC not enabled anymore
					// For writing answer to transmit-register SSC needs to be enabled, disable after writing answer to register
					if(success)
					{
						sendPosAnswer(word1);
					}
					else
					{
						sendNegAnswer(word1);
					}
					cmdstate = READYFORSPIDATA;
					break;				
						
				case SETMOTORSPEED:
					Emo_SetRefSpeed(motorspeed);
					sendPosAnswer(word1);
					cmdstate = READYFORSPIDATA;
					break;
					
				case MOTORCONTROL:
					if((word1byte2 == START_MOTOR) && (bMotorRun == 0u)) 
					{	
						// Initialize and start motor
						Emo_Init();
						Main_lStartMotor();
						bMotorRun = 1u;
					}
					if (word1byte2 == STOP_MOTOR)	
					{
						// Stop  motor
						Main_lStopMotor();
						bMotorRun = 0u;
					}
					SSC2_SendWord(word1 +CONFIRM_OFFSET);
					cmdstate = READYFORSPIDATA;
					break;
						
				case BOARDCONTROL:
				{
					switch(word1byte2)
					{
						case AUTOADDRESSING:
							do_autoaddressing();
							break;
						case BOARD_AVAILABLE:
							SSC2_SendWord(word1 +CONFIRM_OFFSET);
							break;
						case RESET:
							PMU->GPUDATA00.bit.DATA0 = 0xFF;
							__NVIC_SystemReset();
							break;
					}
					cmdstate = READYFORSPIDATA;
					break;
				}
				
				case LED_ON:
					PORT_ChangePin(word1byte2, PORT_ACTION_SET);
					SSC2_SendWord(word1 +CONFIRM_OFFSET);
					cmdstate = READYFORSPIDATA;
					break;
				
				case LED_OFF:
					PORT_ChangePin(word1byte2, PORT_ACTION_CLEAR);
					SSC2_SendWord(word1 +CONFIRM_OFFSET);
					cmdstate = READYFORSPIDATA;
					break;
					
				default:
					/* wrong command */
					cmdstate = READYFORSPIDATA;
					break;
			}
		}
  	}
} /* End of main() */


void Main_HandleSysTick(void)
{
  /* Callback function executed every ms for speed control */
  Emo_CtrlSpeed();
} /* End of Main_HandleSysTick */


/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/
static void Main_lStartMotor(void)
{
  uint32 Error;
  Error = EMO_ERROR_NONE;

  if (Error == EMO_ERROR_NONE)
  {
    /* Start motor with desired positive or negative speed in [rpm] */
    Error = Emo_StartMotor();
  }

  if (Error == EMO_ERROR_NONE)
  {
  }
  else /* Error */
  {
  }
} /* End of Main_lStartMotor */


static void Main_lStopMotor(void)
{
  uint32 Error;
  Error = Emo_StopMotor();

  if (Error != EMO_ERROR_NONE)
  {
  }
} /* End of Main_lStopMotor */


// ----------------------------------------interrupts----------------------------------------
void Data_Received()
{
	uint16 receivedword = SSC2_ReadWord();
	//internal interrupt state
	static uint8 waitingFor = NEWCOMMAND; 
	static uint8 sendcounter = 0, receivecounter = 0, messagesToReceive = 0;
	
	if((cmdstate != READYFORSPIDATA) && (receivedword != 0x0902)) //BOARDCONTROL, RESET
		return;

	switch (waitingFor)
	{
		case NEWCOMMAND:  // ------------------------------ NEWCOMMAND ------------------------------
			word1 = receivedword;
			word1byte1 = 0xFF & (receivedword >> 8);
			word1byte2 = 0xFF & receivedword;
			
			switch (word1byte1)
			{
				/* catch "special" cases that need another Message */
				case 0x03:
					/* send data to master when receiving next message, now send number of 16bit-messages to send */
					SSC2_SendWord(NROFMESSAGES);
					waitingFor = SENDDATA;
					cmdstate = NEWSPIDATATOPROCESS;
					break;
				case 0x04:
					waitingFor = RECEIVEDATA;
					messagesToReceive = word1byte2;
					break;
				case 0x05:
					if (isvalueinarray(word1byte2, indices_16bit, indices_16bit_size) == 1) /* 16Bit data --> wait for one more message */
					{
						waitingFor = DATA_1_OF_1;
					}
					else /* 32Bit data --> wait for two more messages */
					{
						waitingFor = DATA_1_OF_2;
					}
					break;
				case 0x07: /* motorspeed: wait for one more message (=motorspeed) */
					waitingFor = MOTORSPEED;
					break;
				default: /* just one message for this command --> data complete */
					cmdstate = NEWSPIDATATOPROCESS;
			}
			break;
		
		case DATA_1_OF_1:  
			word2 = receivedword;
			waitingFor = NEWCOMMAND;
			cmdstate = NEWSPIDATATOPROCESS;
			break;
		
		case DATA_1_OF_2: 
			word2 = receivedword;
			waitingFor = DATA_2_OF_2;
			break;
		
		case DATA_2_OF_2:  
			word3 = receivedword;
			waitingFor = NEWCOMMAND;
			cmdstate = NEWSPIDATATOPROCESS;
			break;

		case MOTORSPEED:  
			// receivedword (unsigned int) contains an signed value! --> first bit = 1 --> negative
			if(receivedword > 32767)
				motorspeed = 0x8000 + (receivedword & 0x7FFF);
			else
				motorspeed = receivedword;
			
			waitingFor = NEWCOMMAND;
			cmdstate = NEWSPIDATATOPROCESS;
			break;
		
		case SENDDATA:  // ------------------------------ SENDDATA ------------------------------
			// send one 16bit-message at each interrupt (only after data is prepared in main loop)
			if (data_prepared == 1)
			{
				if(sendcounter < NROFMESSAGES)
				{
					SSC2_SendWord(rxtxbuffer.dataarray_HALL[sendcounter]);
					sendcounter++;
				}
				else  // send CRC
				{
					SSC2_SendWord(calcCRC);
					sendcounter = 0;
					data_prepared = 0;
					waitingFor = NEWCOMMAND;
					cmdstate = READYFORSPIDATA;
				}
			}
			break;
			
		case RECEIVEDATA:  // ------------------------------ RECEIVEDATA ------------------------------
			if(receivecounter < messagesToReceive)
			{
				/* collect data here and write them to emo config variable when complete (in main, not in interrupt) */
				rxtxbuffer.dataarray_HALL[receivecounter] = receivedword;
				receivecounter++;
			}
			else
			{
				recvCRC = (uint8_t)receivedword;
				receivecounter++;				
				
				// all messages received
				receivecounter = 0;
				messagesToReceive = 0;
				waitingFor = NEWCOMMAND;
				cmdstate = NEWSPIDATATOPROCESS;
			}				
			break;
			
		default:  // ------------------------------ default ------------------------------
			break;
	} /* end of switch (waitingFor) */
}


// Enable and Disable SSC2 to synchronize Slave (TLE) to Master (Arduino)
// Interrupt by falling/rising edge on SlaveSelect
void chip_Selected()
{
	// Enable SSC2
	SSC2->CON.PRG_bit.EN = 1;
}

void chip_Deselected()
{
	// Disable SSC2
	SSC2->CON.PRG_bit.EN = 0;
}

